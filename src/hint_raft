2C: persistence (OK)

Task:
Complete the functions persist() and readPersist() in raft.go
by adding code to save and restore persistent state.
You will need to encode (or "serialize") the state as an array of bytes in order
to pass it to the Persister.
Use the labgob encoder; see the comments in persist() and readPersist().
labgob is like Go's gob encoder but prints error messages if you try to encode
structures with lower-case field names.
For now, pass nil as the second argument to persister.Save().
Insert calls to persist() at the points where your implementation changes persistent state.
Once you've done this, and if the rest of your implementation is correct,
you should pass all of the 2C tests.


Optimization for 2B: (OK)

XTerm:  term in the conflicting entry (if any)
XIndex: index of first entry with that term (if any)
XLen:   log length

Then the leader's logic can be something like:

Case 1: leader doesn't have XTerm:
    nextIndex = XIndex
Case 2: leader has XTerm:
    nextIndex = leader's last entry for XTerm
Case 3: follower's log is too short:
    nextIndex = XLen


Hint:

OK
Run git pull to get the latest lab software.

OK
The 2C tests are more demanding than those for 2A or 2B,
and failures may be caused by problems in your code for 2A or 2B.



2B: log (OK)

Task:
Implement the leader and follower code to append new log entries,
so that the go test -run 2B tests pass.

Hint:

OK
Run git pull to get the latest lab software.

OK
Your first goal should be to pass TestBasicAgree2B().
Start by implementing Start(),
then write the code to send and receive new log entries via AppendEntries RPCs,
following Figure 2. Send each newly committed entry on applyCh on each peer.

OK
You will need to implement the election restriction (section 5.4.1 in the paper).

OK
One way to fail to reach agreement in the early Lab 2B tests is to
hold repeated elections even though the leader is alive.
Look for bugs in election timer management, or not
sending out heartbeats immediately after winning an election.

OK
Your code may have loops that repeatedly check for certain events.
Don't have these loops execute continuously without pausing,
since that will slow your implementation enough that it fails tests.
Use Go's condition variables, or insert a time.Sleep(10 * time.Millisecond)
in each loop iteration.

OK
Do yourself a favor for future labs and write (or re-write) code that's clean and clear.
For ideas, re-visit our the Guidance page with tips on
how to develop and debug your code.

OK
If you fail a test, look over the code for the test in config.go and test_test.go
to get a better understanding what the test is testing.
config.go also illustrates how the tester uses the Raft API.




2A: leader election (OK)

Task:
Implement Raft leader election and heartbeats
(AppendEntries RPCs with no log entries).
The goal for Part 2A is for a single leader to be elected,
for the leader to remain the leader if there are no failures,
and for a new leader to take over if the old leader fails or if packets
to/from the old leader are lost. Run go test -run 2A to test your 2A code.

Hint:

OK
You can't easily run your Raft implementation directly;
instead you should run it by way of the tester, i.e. go test -run 2A .

OK
Follow the paper's Figure 2. At this point you care about sending and
receiving RequestVote RPCs, the Rules for Servers that relate to elections,
and the State related to leader election,

OK
Add the Figure 2 state for leader election to the Raft struct in raft.go.
You'll also need to define a struct to hold information about each log entry.

OK
Fill in the RequestVoteArgs and RequestVoteReply structs.

OK
Modify Make() to create a background goroutine that will kick off
leader election periodically by sending out RequestVote RPCs when it
hasn't heard from another peer for a while. This way a peer will learn
who is the leader, if there is already a leader, or become the leader itself.
Implement the RequestVote() RPC handler so that servers will vote for one another.

OK
To implement heartbeats, define an AppendEntries RPC struct
(though you may not need all the arguments yet),
and have the leader send them out periodically.
Write an AppendEntries RPC handler method that resets the election timeout
so that other servers don't step forward
as leaders when one has already been elected.

OK
Make sure the election timeouts in different peers don't always
fire at the same time, or else all peers will vote only for themselves
and no one will become the leader.

OK
The tester requires that the leader send heartbeat RPCs no more than
ten times per second.

OK
The tester requires your Raft to elect a new leader within five seconds
of the failure of the old leader (if a majority of peers can still communicate).
Remember, however, that leader election may require multiple rounds
in case of a split vote (which can happen if packets are lost or if candidates
unluckily choose the same random backoff times). You must pick election timeouts
(and thus heartbeat intervals) that are short enough that it's very likely
that an election will complete in less than five seconds even if it requires
multiple rounds.

OK
The paper's Section 5.2 mentions election timeouts
in the range of 150 to 300 milliseconds.
Such a range only makes sense if the leader sends heartbeats
considerably more often than once per 150 milliseconds
(e.g., once per 10 milliseconds).
Because the tester limits you tens of heartbeats per second,
you will have to use an election timeout larger than the paper's 150 to 300
milliseconds, but not too large, because then you may fail to elect a leader
within five seconds.

OK
You may find Go's rand useful.

OK
You'll need to write code that takes actions periodically or after delays
in time. The easiest way to do this is to create a goroutine with a loop
that calls time.Sleep(); see the ticker() goroutine that Make() creates
for this purpose. Don't use Go's time.Timer or time.Ticker, which are
difficult to use correctly.

OK
The Guidance page has some tips on how to develop and debug your code.

OK
If your code has trouble passing the tests, read the paper's Figure 2 again;
the full logic for leader election is spread over multiple parts of the figure.

OK
Don't forget to implement GetState().

OK
The tester calls your Raft's rf.Kill()
when it is permanently shutting down an instance.
You can check whether Kill() has been called using rf.killed().
You may want to do this in all loops, to avoid having dead Raft instances
print confusing messages.

OK
Go RPC sends only struct fields whose names start with capital letters.
Sub-structures must also have capitalized field names
(e.g. fields of log records in an array).
The labgob package will warn you about this; don't ignore the warnings.